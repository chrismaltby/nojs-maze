<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NoJS Maze</title>
    <style>

body {
  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif; 
  font-weight: 300;  
}

#maze-3d {
  transform: translate3d(0,0,0);
}
        
#goal {
  position: absolute;
  width: 100%;
  background: rgba(0,0,0,0.2);
  height: 100%;
  top: 0px;
  left: 0px;
  bottom: 0px;
  right: 0px;
  color: #fff;
  font-family: helvetica, sans;
  font-size: 32px;
  padding-top: 100px;
  display: none;
  text-align: center;
}

#goal .retry-btn {
  background: #5b6ee1;
  padding: 20px 40px;
  border-radius: 4px;
  border: 1px solid #3f3f74;
  border-top:1px solid #639bff;
  display: inline-block;
}

#controls {
  position: relative;
  top: 0px;
  left: 0px;
  background: #ccc;
  width: 600px;
  height: 80px;
}

#controls label {
  box-sizing: border-box;
  line-height: 80px;
  width: 33.333333%;
  height: 80px;
  -webkit-user-select: none; /* Chrome/Safari */        
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* IE10+ */
  -o-user-select: none;
  user-select: none;  
}
            
#controls .rotate-left-btn {
  position: absolute;
  top: 0px;
  left: 0px;
  background: #eee;
  border: 1px solid #ccc;
  display: none;
  text-align: center;
}

#controls .rotate-right-btn {
  position: absolute;
  top: 0px;
  left: 66.66666%;
  background: #eee;
  border: 1px solid #ccc;
  display: none;
  text-align: center;
}

#controls .move-btn {
  position: absolute;
  top: 0px;
  left: 33.333333%;
  background: #eee;
  border: 1px solid #ccc;  
  display: none;
  text-align: center;
}

.container {
    position: relative;
    width: 600px;
    height: 500px;
    margin: 0;
    transform-style: preserve-3d;
    perspective: 600px;  
    overflow: hidden;  
    backface-visibility: hidden;
}
        
.north {
  transform: translate3d(0px,300px,300px) rotateX( 90deg ) rotateZ(180deg);
}

.east {
  transform: translate3d(-300px,0px,300px) rotateY( 90deg ) rotateZ(270deg);
}

.west {
  transform: translate3d(300px,0px,300px) rotateY( -90deg ) rotateZ(90deg);
}

.south {
  transform: translate3d(0px,-300px,300px) rotateX( -90deg );
}

#tiles { 
  transform: translate3d(0px,450px,0px) rotateX( 90deg ) rotateZ(180deg);
  transform-style: preserve-3d;
}
            
.tile {
  position: absolute;
  transform-style: preserve-3d;
  width: 600px;
  height: 600px;
  margin-top:-300px;
  background: blue;
  /* background: url(img/stone.jpg); */
  background: url(img/floor.png);
  background-size: cover;
}

.wall {
  transform-style: preserve-3d;
  position: absolute;
  width: 600px;
  height: 600px;  
  background: url(img/red_sand.png);
  background-size: cover;
  backface-visibility: hidden;   
  -webkit-backface-visibility: hidden;
}
            
.ceiling {
  position: absolute;
  transform:  translate3d(0px,0px,600px);  
  width: 600px;
  height: 600px;  
  transform-style: preserve-3d;
  background-color: #000;
  background-size: cover;
  image-rendering: pixelated;    
}
    
.goal {
  position: absolute;
  transform:  translate3d(0px,0px,50px);  
  width: 600px;
  height: 600px;  
  transform-style: preserve-3d;
  background: url(img/portal.png);
  background-size: cover;
  image-rendering: pixelated;    
  animation: rotate 20s infinite linear; 
  animation-fill-mode: both; 
}
            
@keyframes rotate {
  0% { transform: translate3d(0px,0px,50px) rotateZ( 0deg ); }
  100% { transform: translate3d(0px,0px,50px) rotateZ( 360deg )  }
}


.tile.x0-y0 {
  transform: translate3d(0px,0px,0px);  
}

.tile.x0-y1 {
  transform: translate3d(0px,600px,0px);  
}

.tile.x1-y1 {
  transform: translate3d(-600px,600px,0px);  
}

<% for (x in map) { %>
    <% for (y in map[x]) { %>
        <%
            const xPos = x * 600;
            const yPos = y * 600;
        %>
        .tile.x<%=x%>-y<%=y%> {
            transform: translate3d(-<%=xPos%>px,<%=yPos%>px,0px);  
        }
    <% } %> 
<% } %>
            
#camera-position {
  transform-style: preserve-3d;
  transform: translate3d(0px,0px,0px); 
  transform-style: preserve-3d;   
  transition:  transform 0.3s linear;
}

#camera-offset {
  transform-style: preserve-3d;
  transform: translate3d(0px,100px,0px); 
  transform-style: preserve-3d;   
}

#camera-rotate {
  transform: translate3d(0px,0px,0px); 
  transform-style: preserve-3d;  
  animation-fill-mode: both;  
}

@keyframes rotate-demo {
  0% { transform: rotateY( 0deg ); }
  50% { transform: rotateY( 180deg )  }
  100% { transform: rotateY( 0deg )  }
}

/* Rotation */

#direction-w-n:checked + span #camera-rotate {
  animation: rotate-w-n 0.3s 1 linear; 
  animation-fill-mode: both; 
}
#direction-e-n:checked + span #camera-rotate {
  animation: rotate-e-n 0.3s 1 linear; 
  animation-fill-mode: both; 
}

#direction-w-s:checked + span #camera-rotate {
  animation: rotate-w-s 0.3s 1 linear; 
  animation-fill-mode: both; 
}
#direction-e-s:checked + span #camera-rotate {
  animation: rotate-e-s 0.3s 1 linear; 
  animation-fill-mode: both; 
}

#direction-n-e:checked + span #camera-rotate {
  animation: rotate-n-e 0.3s 1 linear; 
  animation-fill-mode: both; 
}
#direction-s-e:checked + span #camera-rotate {
  animation: rotate-s-e 0.3s 1 linear; 
  animation-fill-mode: both; 
}

#direction-n-w:checked + span #camera-rotate {
  animation: rotate-n-w 0.3s 1 linear; 
  animation-fill-mode: both; 
}
#direction-s-w:checked + span #camera-rotate {
  animation: rotate-s-w 0.3s 1 linear; 
  animation-fill-mode: both; 
}

@keyframes rotate-w-n {
  0% { transform: rotateY( -90deg ); }
  100% { transform: rotateY( 0deg )  }
}
@keyframes rotate-e-n {
  0% { transform: rotateY( 90deg ); }
  100% { transform: rotateY( 0deg )  }
}

@keyframes rotate-w-s {
  0% { transform: rotateY( 270deg ); }
  100% { transform: rotateY( 180deg )  }
}
@keyframes rotate-e-s {
  0% { transform: rotateY( 90deg ); }
  100% { transform: rotateY( 180deg )  }
}

@keyframes rotate-n-w {
  0% { transform: rotateY( 0deg ); }
  100% { transform: rotateY( -90deg )  }
}
@keyframes rotate-s-w {
  0% { transform: rotateY( 180deg ); }
  100% { transform: rotateY( 270deg )  }
}

@keyframes rotate-n-e {
  0% { transform: rotateY( 0deg ); }
  100% { transform: rotateY( 90deg )  }
}
@keyframes rotate-s-e {
  0% { transform: rotateY( 180deg ); }
  100% { transform: rotateY( 90deg )  }
}

#controls .rotate-left-btn.rotate-direction-n-w {
  display: block;
}
#controls .rotate-right-btn.rotate-direction-n-e {
  display: block;
}

/* North */
#direction-w-n:checked + span .rotate-left-btn.rotate-direction-n-w,
#direction-e-n:checked + span .rotate-left-btn.rotate-direction-n-w {
  display: block;
}
#direction-w-n:checked + span .rotate-right-btn.rotate-direction-n-e,
#direction-e-n:checked + span .rotate-right-btn.rotate-direction-n-e {
  display: block;
}

/* East */
#direction-n-e:checked + span .rotate-left-btn.rotate-direction-e-n,
#direction-s-e:checked + span .rotate-left-btn.rotate-direction-e-n {
  display: block;
}
#direction-n-e:checked + span .rotate-right-btn.rotate-direction-e-s,
#direction-s-e:checked + span .rotate-right-btn.rotate-direction-e-s {
  display: block;
}

/* West */
#direction-n-w:checked + span .rotate-left-btn.rotate-direction-w-s,
#direction-s-w:checked + span .rotate-left-btn.rotate-direction-w-s {
  display: block;
}
#direction-n-w:checked + span .rotate-right-btn.rotate-direction-w-n,
#direction-s-w:checked + span .rotate-right-btn.rotate-direction-w-n {
  display: block;
}

/* South */
#direction-w-s:checked + span .rotate-left-btn.rotate-direction-s-e,
#direction-e-s:checked + span .rotate-left-btn.rotate-direction-s-e {
  display: block;
}
#direction-w-s:checked + span .rotate-right-btn.rotate-direction-s-w,
#direction-e-s:checked + span .rotate-right-btn.rotate-direction-s-w {
  display: block;
}

/* Position */
<% for (x in map) { %>
    <% for (y in map[x]) { %>
        <%
            const xi = parseInt(x);
            const yi = parseInt(y);            
            const xPos = xi * 600;
            const yPos = yi * 600;
            const isPath = !!map[xi][yi];
            const isGoal = map[xi][yi] === 2;
        %>
            <% if (isPath) { %>
                #pos-<%=x%>-<%=y%>:checked + span #camera-position {
                    transform: translate3d(-<%=xPos%>px,0px,<%=yPos%>px);
                }
            <% } %>     
            <% if (isGoal) { %>
                #pos-<%=x%>-<%=y%>:checked + span #goal {
                    display:block;
                }
                #pos-<%=x%>-<%=y%>:checked + span #controls {
                    display:none;
                }    
            <% } %>
    <% } %> 
<% } %>

/* Movement Buttons */

<% for (x in map) { %>
    <% for (y in map[x]) { %>
        <%
            const xi = parseInt(x);
            const yi = parseInt(y);
            const n = yi < map[xi].length && !!(map[xi]||[])[yi+1] ;
            const s = yi > 0 && !!(map[xi]||[])[yi-1];
            const e = xi < map.length && !!(map[xi+1]||[])[yi];
            const w = xi > 0 && !!(map[xi-1]||[])[yi];
            const yN = yi + 1;
            const yS = yi - 1;
            const xW = xi - 1;
            const xE = xi + 1;
        %>
        <% if (n) { %>
            #direction-w-n:checked + span #pos-<%=x%>-<%=y%>:checked + span .move-btn.pos-<%=x%>-<%=yN%>,
#direction-e-n:checked + span #pos-<%=x%>-<%=y%>:checked + span .move-btn.pos-<%=x%>-<%=yN%> {
                display: block
            }              
        <% } %>
        <% if (s) { %>
            #direction-w-s:checked + span #pos-<%=x%>-<%=y%>:checked + span .move-btn.pos-<%=x%>-<%=yS%>,
#direction-e-s:checked + span #pos-<%=x%>-<%=y%>:checked + span .move-btn.pos-<%=x%>-<%=yS%> {
                display: block
            }             
        <% } %>
        <% if (e) { %>
            #direction-n-e:checked + span #pos-<%=x%>-<%=y%>:checked + span .move-btn.pos-<%=xE%>-<%=y%>,
#direction-s-e:checked + span #pos-<%=x%>-<%=y%>:checked + span .move-btn.pos-<%=xE%>-<%=y%> {
                display: block
            }                 
        <% } %>
        <% if (w) { %>
            #direction-n-w:checked + span #pos-<%=x%>-<%=y%>:checked + span .move-btn.pos-<%=xW%>-<%=y%>,
#direction-s-w:checked + span #pos-<%=x%>-<%=y%>:checked + span .move-btn.pos-<%=xW%>-<%=y%> {
                display: block
            }                   
        <% } %>                                                  
    <% } %> 
<% } %>

#direction-w-n:checked + span #pos-0-0:checked + span .move-btn.pos-0-1,
#direction-e-n:checked + span #pos-0-0:checked + span .move-btn.pos-0-1 {
  display: block
}

#direction-n-e:checked + span #pos-0-1:checked + span .move-btn.pos-1-1,
#direction-s-e:checked + span #pos-0-1:checked + span .move-btn.pos-1-1 {
  display: block
}

#direction-w-s:checked + span #pos-0-1:checked + span .move-btn.pos-0-0,
#direction-e-s:checked + span #pos-0-1:checked + span .move-btn.pos-0-0 {
  display: block
}

#direction-n-w:checked + span #pos-1-1:checked + span .move-btn.pos-0-1,
#direction-s-w:checked + span #pos-1-1:checked + span .move-btn.pos-0-1 {
  display: block
}

@media handheld, only screen and (-webkit-min-device-pixel-ratio: 3) and (max-width: 1080px), screen and (max-width: 480px) {
  .container {
      transform: scale(0.5) translate3d(-50%,-50%,0);
      margin-bottom: -250px;
      margin-right: -300px;
  }

  #controls {
    width: 300px;
  }
}
            
</style>

</head>
<body>
  <h1>No Javascript 3D Maze Game Proof of Concept</h1>
  <div id="maze-3d">
    <h2>Direction Inputs</h2>
    <input type="radio" name="direction" id="direction-n-w" style=""/>
    <span>
    <input type="radio" name="direction" id="direction-n-e" style=""/>
    <span>
    <input type="radio" name="direction" id="direction-s-w" style=""/>
    <span>
    <input type="radio" name="direction" id="direction-s-e" style=""/>
    <span>
    <input type="radio" name="direction" id="direction-w-n" checked="true" style=""/>
    <span>
    <input type="radio" name="direction" id="direction-w-s" style=""/>
    <span>
    <input type="radio" name="direction" id="direction-e-n" style=""/>
    <span>
    <input type="radio" name="direction" id="direction-e-s" style=""/>
    <span>
    <h2>Location Inputs</h2>
    <% for (x in map) { %>
        <% for (y in map[x]) { %>
            <%
                const xi = parseInt(x);
                const yi = parseInt(y);     
                const checked = xi === startX && yi === startY;
            %>        
            <input
                type="radio"
                name="position"
                id="pos-<%=x%>-<%=y%>"
                <% if (checked) { %>checked="true"<% } %>
                style=""
            />
            <span>        
        <% } %> 
    <% } %>
    
    <h2>Game Window</h2>
    <section id="red" class="container">
        <div id="camera-offset">
        <div id="camera-rotate">
        <div id="camera-position">
      
        <div id="tiles">
            <% for (x in map) { %>
                <% for (y in map[x]) { %>
                    <%
                        const xi = parseInt(x);
                        const yi = parseInt(y);
                        const n = !(map[xi]||[])[yi+1];
                        const s = !(map[xi]||[])[yi-1];
                        const e = !(map[xi+1]||[])[yi];
                        const w = !(map[xi-1]||[])[yi];
                        const isGoal = map[xi][yi] === 2;
                    %>
                    <div class="tile x<%=xi%>-y<%=yi%>">
                        <div class="ceiling"></div>
                        <% if (n) { %>
                            <div  class="wall north"></div>                    
                        <% } %>
                        <% if (s) { %>
                            <div  class="wall south"></div>                    
                        <% } %>
                        <% if (e) { %>
                            <div  class="wall east"></div>                    
                        <% } %>
                        <% if (w) { %>
                            <div  class="wall west"></div>                    
                        <% } %>        
                        <% if (isGoal) { %>
                            <div class="goal"></div>
                        <% } %>                                                  
                    </div>
                <% } %> 
            <% } %>
        </div>
        
        </div>
        </div>
        </div>

        <div id="goal">
            <h1>Success!</h1>
            <label class="retry-btn" for="pos-0-0">Play Again</label>
        </div>    
    </section>
        
    <div id="controls">
        <label class="rotate-left-btn rotate-direction-n-w" for="direction-n-w">Left</label>
        <label class="rotate-left-btn rotate-direction-s-e" for="direction-s-e">Left</label>
        <label class="rotate-left-btn rotate-direction-w-s" for="direction-w-s">Left</label>
        <label class="rotate-left-btn rotate-direction-e-n" for="direction-e-n">Left</label>
      
        <label class="rotate-right-btn rotate-direction-n-e" for="direction-n-e">Right</label>
        <label class="rotate-right-btn rotate-direction-s-w" for="direction-s-w">Right</label>
        <label class="rotate-right-btn rotate-direction-w-n" for="direction-w-n">Right</label>
        <label class="rotate-right-btn rotate-direction-e-s" for="direction-e-s">Right</label>
      
        <% for (x in map) { %>
            <% for (y in map[x]) { %>
                <%
                    const xi = parseInt(x);
                    const yi = parseInt(y);            
                    const n = !(map[xi]||[])[yi+1];
                    const s = !(map[xi]||[])[yi-1];
                    const e = !(map[xi+1]||[])[yi];
                    const w = !(map[xi-1]||[])[yi];
                    const isGoal = map[xi][yi] === 2;
                %>
                <label class="move-btn pos-<%=x%>-<%=y%>" for="pos-<%=x%>-<%=y%>">Forward</label>
            <% } %> 
        <% } %>  
    </div>
        
    <% for (x in map) { %>
        <% for (y in map[x]) { %>
            </span>
        <% } %> 
    <% } %>  
        
  </div>
</body>
</html>
